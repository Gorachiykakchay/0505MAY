import tkinter as tk
from tkinter import messagebox
import random

maps = list(range(1, 10))
victories = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]

root = tk.Tk()
root.title("Крестики-Нолики")
root.configure(background='black')
root.resizable(False, False)

player_turn = True

def check_winner():
    for i in victories:
        if str(maps[i[0]]) == 'X' and str(maps[i[1]]) == 'X' and str(maps[i[2]]) == 'X':
            return 'X'
        elif str(maps[i[0]]) == 'O' and str(maps[i[1]]) == 'O' and str(maps[i[2]]) == 'O':
            return 'O'
    return ''

def reset_game():
    global player_turn, maps
    player_turn = True
    maps = list(range(1, 10))
    for button in buttons:
        button['text'] = ""
        button['state'] = 'normal'
        button.configure(bg = 'white', activebackground='white')

def computer_move():
    strategies = ['O', 'X']
    for strategy in strategies:
        for victory in victories:
            if sum(map(lambda idx: maps[idx] == strategy, victory)) == 2 and sum(map(lambda idx: isinstance(maps[idx], int), victory)) == 1:
                return victory[[maps[idx] != strategy for idx in victory].index(True)]
    while True:
        idx = random.choice(range(9))
        if isinstance(maps[idx], int):
            return idx

def process_click(i, button):
    global player_turn
    symbol = 'X' if player_turn else 'O'
    maps[i] = symbol
    button['text'] = symbol
    if symbol=='X':
        button.configure(bg = 'orange', activebackground='orange')
    else:
        button.configure(bg = 'lightgreen', activebackground='lightgreen')
    button['state'] = 'disabled'
    winner = check_winner()
    if winner:
        if winner == 'O':
            messagebox.showerror("Победа", "Победил компьютер!")
        else:
            messagebox.showinfo("Победа", "Победил игрок!")
        reset_game()
        return
    elif all(isinstance(x, str) for x in maps):
        messagebox.showwarning("Ничья", "Игра окончена без победителя!")
        reset_game()
        return
    player_turn = not player_turn
    if not player_turn:
        idx = computer_move()
        process_click(idx, buttons[idx])
        return

# Display whose turn
turn_text = tk.StringVar()
turn_label = tk.Label(root, textvariable=turn_text, bg="black", fg="white", font=("Helvetica", 16))
turn_text.set("Turn of Player")
turn_label.grid(row=0, column=0, columnspan=3)

buttons = []
for i in range(9):
    button = tk.Button(root, text='', width=10, height=4, font=('Helvetica', 20, 'bold'), command=lambda i=i: process_click(i, buttons[i]))
    button.grid(row=(i//3)+1, column=i%3)
    buttons.append(button)

root.update_idletasks()
x = (root.winfo_screenwidth() - root.winfo_reqwidth()) / 2
y = (root.winfo_screenheight() - root.winfo_reqheight()) / 2
root.wm_geometry("+%d+%d" % (x, y))
root.mainloop()
